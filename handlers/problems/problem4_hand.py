from aiogram import Router, F, types
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from utils.problem4states import Problem4States
from utils.validators import validate_input_int

from keyboards import reply

router = Router()


@router.message(F.text.lower().in_(["4 –∑–∞–¥–∞—á–∞"]))
async def handle_problem4(message: Message, state: FSMContext):
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ —Ñ–∏—Ä–º—ãüèÖ\n"
                         "–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –í—ã –≤–≤–µ–¥–µ—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å –∏—Ç–æ–≥–æ–≤–æ–π –ø—Ä–∏–±—ã–ª—å—é —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –∏–∑–¥–µ—Ä–∂–µ–∫.\n"
                         "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (Q):", reply_markup=reply.in_task)
    await state.set_state(Problem4States.InputQ)


@router.message(Problem4States.InputQ)
async def input_q(message: types.Message, state: FSMContext):
    if await validate_input_int(message, state, 'Q'):
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —à—Ç—É–∫–∞—Ö (P):", reply_markup=reply.in_task)
        await state.set_state(Problem4States.InputP)


@router.message(Problem4States.InputP)
async def input_p(message: types.Message, state: FSMContext):
    if await validate_input_int(message, state, 'P'):
        await message.answer(
            "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–∫–∞—Ö.\n"
            "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: '–û–ø–ª–∞—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞, 5'\n"
            "–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∏–∑–¥–µ—Ä–∂–µ–∫ –≤–≤–µ–¥–∏—Ç–µ –æ—Ç 0 –¥–æ 5 —Å—Ç—Ä–æ–∫.", reply_markup=reply.in_task)
        await state.set_state(Problem4States.InputVC)


@router.message(Problem4States.InputVC)
async def input_vc(message: types.Message, state: FSMContext):
    try:
        variables = message.text.split('\n')
        VC_total = 0
        VC_info = []
        if len(variables) > 5:
            await message.answer("–í—ã –≤–≤–µ–ª–∏ –±–æ–ª—å—à–µ 5 —Å—Ç—Ä–æ–∫, –≤ —Ä–µ—à–µ–Ω–∏–∏ –±—É–¥—É—Ç —É—á—Ç–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫üìã", reply_markup=reply.in_task)
        for variable in variables[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –≤–≤–æ–¥ –¥–æ 5 —Å—Ç—Ä–æ–∫
            data = variable.split(',')
            if len(data) == 2:
                name, cost = data
                cost = int(cost.strip())
                if cost <= 0:
                    await message.answer(
                        "–ò–∑–¥–µ—Ä–∂–∫–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω—É–ª–µ–≤—ã–º–∏ –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–¥–µ—Ä–∂–µ–∫.", reply_markup=reply.in_task)
                    return
                VC_total += cost
                VC_info.append((name.strip(), cost))
            elif variable.strip():  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                await message.answer(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–∫–∞—Ö.\n"
                    "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: '–û–ø–ª–∞—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞, 5'\n", reply_markup=reply.in_task)
                return

        await state.update_data(VC_total=VC_total, VC_info=VC_info)
        await message.answer(
            "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–∫–∞—Ö.\n"
            "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: '–ê—Ä–µ–Ω–¥–∞ –∑–∞–ª–∞, 200000'\n", reply_markup=reply.in_task)
        await state.set_state(Problem4States.InputFC)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")


@router.message(Problem4States.InputFC)
async def input_fc(message: types.Message, state: FSMContext):
    try:
        variables = message.text.split('\n')
        FC_total = 0
        FC_info = []
        if len(variables) > 5:
            await message.answer("–í—ã –≤–≤–µ–ª–∏ –±–æ–ª—å—à–µ 5 —Å—Ç—Ä–æ–∫, –≤ —Ä–µ—à–µ–Ω–∏–∏ –±—É–¥—É—Ç —É—á—Ç–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫üìã", reply_markup=reply.in_task)
        for variable in variables[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –≤–≤–æ–¥ –¥–æ 5 —Å—Ç—Ä–æ–∫
            data = variable.split(',')
            if len(data) == 2:
                name, cost = data
                cost = int(cost.strip())
                if cost <= 0:
                    await message.answer(
                        "–ò–∑–¥–µ—Ä–∂–∫–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω—É–ª–µ–≤—ã–º–∏ –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–¥–µ—Ä–∂–µ–∫.", reply_markup=reply.in_task)
                    return
                FC_total += cost
                FC_info.append((name.strip(), cost))
            elif variable.strip():  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                await message.answer(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–∫–∞—Ö.\n"
                    "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: '–ê—Ä–µ–Ω–¥–∞ –∑–∞–ª–∞, 200000'\n", reply_markup=reply.in_task)
                return

        await state.update_data(FC_total=FC_total, FC_info=FC_info)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        response = (
            f"–ü—Ä–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ {data['Q']} –µ–¥–∏–Ω–∏—Ü –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –ø–æ {data['P']} —Ä—É–±. –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ –∏ "
            f"—É—Ä–æ–≤–Ω–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–µ–∫ –≤ {data['VC_total']} —Ä—É–±./–µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ "
            f"(–≤–∫–ª—é—á–∞—è: {', '.join([f'{name} ({cost} —Ä—É–±./–µ–¥.)' for name, cost in data['VC_info']])}) "
            f"–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–µ–∫ –≤ {data['FC_total']} —Ä—É–±. "
            f"(–≤–∫–ª—é—á–∞—è: {', '.join([f'{name} ({cost} —Ä—É–±.)' for name, cost in data['FC_info']])}), "
            f"–ø—Ä–∏–±—ã–ª—å —Å–æ—Å—Ç–∞–≤–∏—Ç: "
            f"{data['P'] * data['Q'] - data['FC_total'] - data['VC_total'] * data['Q']} —Ä—É–±."
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(response, reply_markup=reply.main)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
