"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ —Ñ–∏—Ä–º—ã.
"""

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from keyboards import reply
from utils.problem4states import Problem4States
from utils.validators import validate_input_int


router = Router()


@router.message(F.text.lower().in_(["4 –∑–∞–¥–∞—á–∞"]))
async def handle_problem4(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ –Ω–∞—á–∞–ª–æ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ —Ñ–∏—Ä–º—ã.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    Returns:
        None
    """

    await message.answer(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ —Ñ–∏—Ä–º—ãüèÖ\n–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –í—ã"
        " –≤–≤–µ–¥–µ—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å –∏—Ç–æ–≥–æ–≤–æ–π –ø—Ä–∏–±—ã–ª—å—é —Å"
        " —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –∏–∑–¥–µ—Ä–∂–µ–∫.\n–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (Q):",
        reply_markup=reply.in_task,
    )
    await state.set_state(Problem4States.InputQ)


@router.message(Problem4States.InputQ)
async def input_q(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ–±—ä–µ–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (Q).

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    Returns:
        None
    """

    if await validate_input_int(message, state, "Q"):
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —à—Ç—É–∫–∞—Ö (P):",
            reply_markup=reply.in_task,
        )
        await state.set_state(Problem4States.InputP)


@router.message(Problem4States.InputP)
async def input_p(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ü–µ–Ω—ã –≤ —à—Ç—É–∫–∞—Ö (P).

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    Returns:
        None
    """

    if await validate_input_int(message, state, "P"):
        await message.answer(
            "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–∫–∞—Ö.\n"
            "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: '–û–ø–ª–∞—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞, 5'\n"
            "–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∏–∑–¥–µ—Ä–∂–µ–∫ –≤–≤–µ–¥–∏—Ç–µ –æ—Ç 0 –¥–æ 5 —Å—Ç—Ä–æ–∫.",
            reply_markup=reply.in_task,
        )
        await state.set_state(Problem4States.InputVC)


@router.message(Problem4States.InputVC)
async def input_vc(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–∫–∞—Ö.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    Returns:
        None
    """

    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ —Å–∏–º–≤–æ–ª—É –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        variables = message.text.split("\n")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—â–µ–π —Å—É–º–º—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–µ–∫
        VC_total = 0

        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–∫–∞—Ö
        VC_info = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –±–æ–ª—å—à–µ 5
        if len(variables) > 5:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –±—É–¥—É—Ç —É—á—Ç–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
            await message.answer(
                "–í—ã –≤–≤–µ–ª–∏ –±–æ–ª—å—à–µ 5 —Å—Ç—Ä–æ–∫, –≤ —Ä–µ—à–µ–Ω–∏–∏ –±—É–¥—É—Ç —É—á—Ç–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ"
                " 5 —Å—Ç—Ä–æ–∫üìã",
                reply_markup=reply.in_task,
            )
        for variable in variables[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –≤–≤–æ–¥ –¥–æ 5 —Å—Ç—Ä–æ–∫
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –∑–∞–ø—è—Ç–æ–π
            data = variable.split(",")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–µ —á–∞—Å—Ç–∏ (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å)
            if len(data) == 2:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                name, cost = data

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, —É–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
                cost = int(cost.strip())
                if cost <= 0:
                    await message.answer(
                        "–ò–∑–¥–µ—Ä–∂–∫–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω—É–ª–µ–≤—ã–º–∏ –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏."
                        " –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
                        " –∏–∑–¥–µ—Ä–∂–µ–∫.",
                        reply_markup=reply.in_task,
                    )
                    return

                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–µ–∫
                VC_total += cost

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–∫–∞—Ö –≤ —Å–ø–∏—Å–æ–∫
                VC_info.append((name.strip(), cost))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è (–µ—Å–ª–∏ –ø—É—Å—Ç–∞—è, –∑–Ω–∞—á–∏—Ç –ø—Ä–æ—Å—Ç–æ Enter)
            elif variable.strip():  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                await message.answer(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ"
                    " –æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–∫–∞—Ö.\n–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: '–û–ø–ª–∞—Ç–∞ —Ç–æ–ø–ª–∏–≤–∞,"
                    " 5'\n",
                    reply_markup=reply.in_task,
                )
                return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM —Å –æ–±—â–µ–π —Å—É–º–º–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–µ–∫ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∏—Ö
        await state.update_data(VC_total=VC_total, VC_info=VC_info)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–∫–∞—Ö
        await message.answer(
            "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–∫–∞—Ö.\n"
            "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: '–ê—Ä–µ–Ω–¥–∞ –∑–∞–ª–∞, 200000'\n",
            reply_markup=reply.in_task,
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–∫–∞—Ö
        await state.set_state(Problem4States.InputFC)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")


@router.message(Problem4States.InputFC)
async def input_fc(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–∫–∞—Ö.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    Returns:
        None
    """

    try:
        variables = message.text.split("\n")
        FC_total = 0
        FC_info = []
        if len(variables) > 5:
            await message.answer(
                "–í—ã –≤–≤–µ–ª–∏ –±–æ–ª—å—à–µ 5 —Å—Ç—Ä–æ–∫, –≤ —Ä–µ—à–µ–Ω–∏–∏ –±—É–¥—É—Ç —É—á—Ç–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ"
                " 5 —Å—Ç—Ä–æ–∫üìã",
                reply_markup=reply.in_task,
            )
        for variable in variables[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –≤–≤–æ–¥ –¥–æ 5 —Å—Ç—Ä–æ–∫
            data = variable.split(",")
            if len(data) == 2:
                name, cost = data
                cost = int(cost.strip())
                if cost <= 0:
                    await message.answer(
                        "–ò–∑–¥–µ—Ä–∂–∫–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω—É–ª–µ–≤—ã–º–∏ –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏."
                        " –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
                        " –∏–∑–¥–µ—Ä–∂–µ–∫.",
                        reply_markup=reply.in_task,
                    )
                    return
                FC_total += cost
                FC_info.append((name.strip(), cost))
            elif variable.strip():  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                await message.answer(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ"
                    " –æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–∫–∞—Ö.\n–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: '–ê—Ä–µ–Ω–¥–∞ –∑–∞–ª–∞,"
                    " 200000'\n",
                    reply_markup=reply.in_task,
                )
                return

        await state.update_data(FC_total=FC_total, FC_info=FC_info)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        response = (
            f"–ü—Ä–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ {data['Q']} –µ–¥–∏–Ω–∏—Ü –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –ø–æ {data['P']} —Ä—É–±."
            " –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ –∏ "
            f"—É—Ä–æ–≤–Ω–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–µ–∫ –≤ {data['VC_total']} —Ä—É–±./–µ–¥–∏–Ω–∏—Ü—É"
            " —Ç–æ–≤–∞—Ä–∞ "
            "(–≤–∫–ª—é—á–∞—è:"
            f" {', '.join([f'{name} ({cost} —Ä—É–±./–µ–¥.)' for name, cost in data['VC_info']])}) "
            f"–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∏–∑–¥–µ—Ä–∂–µ–∫ –≤ {data['FC_total']} —Ä—É–±. "
            "(–≤–∫–ª—é—á–∞—è:"
            f" {', '.join([f'{name} ({cost} —Ä—É–±.)' for name, cost in data['FC_info']])}), "
            "–ø—Ä–∏–±—ã–ª—å —Å–æ—Å—Ç–∞–≤–∏—Ç: "
            f"{data['P'] * data['Q'] - data['FC_total'] - data['VC_total'] * data['Q']} —Ä—É–±."
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(response, reply_markup=reply.main)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
