"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Ä–∞—Å—á–µ—Ç–∞
–æ–±—ä–µ–º–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–∞/–∏–∑–ª–∏—à–∫–∞ –Ω–∞ —Ä—ã–Ω–∫–µ.
"""

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from keyboards import reply
from utils.problem3states import Problem3States
from utils.validators import validate_input_float


router = Router()


@router.message(F.text.lower().in_(["3 –∑–∞–¥–∞—á–∞"]))
async def handle_problem3(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ –Ω–∞—á–∞–ª–æ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Ä–∞—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–∞/–∏–∑–ª–∏—à–∫–∞ –Ω–∞ —Ä—ã–Ω–∫–µ.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    Returns:
        None
    """

    await message.answer(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ –∑–∞–¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–ø—Ä–æ—Å–∞ –∏"
        " –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Ü–µ–Ω—ãü•â\n–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –í—ã –≤–≤–µ–¥–µ—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã,"
        " –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å —Å–∏—Ç—É–∞—Ü–∏–µ–π –Ω–∞ —Ä—ã–Ω–∫–µ –∏ –∫–∞–∫–æ–π –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—Ä –¥–µ—Ñ–∏—Ü–∏—Ç–∞"
        " –∏–ª–∏ –∏–∑–ª–∏—à–∫–∞.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç A:",
        reply_markup=reply.in_task,
    )
    await state.set_state(Problem3States.InputA)


@router.message(Problem3States.InputA)
async def input_a(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ A.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    Returns:
        None
    """

    if await validate_input_float(message, state, "A"):
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç B:",
            reply_markup=reply.in_task,
        )
        await state.set_state(Problem3States.InputB)


@router.message(Problem3States.InputB)
async def input_b(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ B.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    Returns:
        None
    """

    if await validate_input_float(message, state, "B"):
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç C:",
            reply_markup=reply.in_task,
        )
        await state.set_state(Problem3States.InputC)


@router.message(Problem3States.InputC)
async def input_c(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ C.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    Returns:
        None
    """
    try:
        C = float(message.text)
        await state.update_data(C=C)

        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç D:",
            reply_markup=reply.in_task,
        )
        await state.set_state(Problem3States.InputD)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


@router.message(Problem3States.InputD)
async def input_d(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ D.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    Returns:
        None
    """

    if await validate_input_float(message, state, "D"):
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç E:",
            reply_markup=reply.in_task,
        )
        await state.set_state(Problem3States.InputE)


@router.message(Problem3States.InputE)
async def input_e(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ E, –≤—ã—á–∏—Å–ª—è–µ—Ç –æ–±—ä–µ–º –¥–µ—Ñ–∏—Ü–∏—Ç–∞/–∏–∑–ª–∏—à–∫–∞ –Ω–∞ —Ä—ã–Ω–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
    –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    Returns:
        None
    """

    if await validate_input_float(message, state, "E"):
        E = float(message.text)
        await state.update_data(E=E)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()

        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—ä–µ–º—ã —Å–ø—Ä–æ—Å–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ —É—Ä–æ–≤–Ω–µ —Ü–µ–Ω—ã E
        Qd = data["A"] - data["B"] * E
        Qs = data["C"] + data["D"] * E

        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Å–ø—Ä–æ—Å–æ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º
        surplus_deficit = round(Qs - Qd, 2)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏—Ç—É–∞—Ü–∏—é –Ω–∞ —Ä—ã–Ω–∫–µ
        situation = (
            "–¥–µ—Ñ–∏—Ü–∏—Ç–∞"
            if surplus_deficit < 0
            else "–∏–∑–ª–∏—à–∫–∞" if surplus_deficit > 0 else "—Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è"
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏
        if situation == "—Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è":
            response = (
                f"–ü—Ä–∏ —É—Ä–æ–≤–Ω–µ —Ü–µ–Ω—ã –≤ {E} –¥–µ–Ω–µ–∂–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –Ω–∞ —Ä—ã–Ω–∫–µ –±—É–¥–µ—Ç"
                f" —Å–∏—Ç—É–∞—Ü–∏—è {situation}."
            )
        else:
            response = (
                f"–ü—Ä–∏ —É—Ä–æ–≤–Ω–µ —Ü–µ–Ω—ã –≤ {E} –¥–µ–Ω–µ–∂–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –Ω–∞ —Ä—ã–Ω–∫–µ –±—É–¥–µ—Ç"
                f" —Å–∏—Ç—É–∞—Ü–∏—è {situation}. –†–∞–∑–º–µ—Ä {situation} —Å–æ—Å—Ç–∞–≤–∏—Ç:"
                f" {abs(surplus_deficit)} –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞."
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            response,
            reply_markup=reply.main,
        )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
