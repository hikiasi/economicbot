"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—é —Ç–æ—á–∫–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è.
"""

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from keyboards import reply
from utils.problem2states import Problem2States
from utils.validators import validate_input_float


router = Router()


@router.message(F.text.lower().in_(["2 –∑–∞–¥–∞—á–∞"]))
async def handle_problem2(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ –Ω–∞—á–∞–ª–æ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—é —Ç–æ—á–∫–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    Returns:
        None
    """

    await message.answer(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞—á—É –ø–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—é —Ç–æ—á–∫–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—èü•à\n–ü–æ—Å–ª–µ"
        " —Ç–æ–≥–æ, –∫–∞–∫ –í—ã –≤–≤–µ–¥–µ—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω—ã"
        " —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è, –æ–±—ä–µ–º–∞ —Å–ø—Ä–æ—Å–∞ –∏ –æ–±—ä–µ–º–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n–í–≤–µ–¥–∏—Ç–µ"
        " –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç A:",
        reply_markup=reply.in_task,
    )
    await state.set_state(Problem2States.InputA)


@router.message(Problem2States.InputA)
async def input_a(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ A.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    Returns:
        None
    """

    if await validate_input_float(message, state, "A"):
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç B:",
            reply_markup=reply.in_task,
        )
        await state.set_state(Problem2States.InputB)


@router.message(Problem2States.InputB)
async def input_b(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ B.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    Returns:
        None
    """

    if await validate_input_float(message, state, "B"):
        await message.answer(
            "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç C:",
            reply_markup=reply.in_task,
        )
        await state.set_state(Problem2States.InputC)


@router.message(Problem2States.InputC)
async def input_c(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ C.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    Returns:
        None
    """

    # if await validate_input_float(message, state, "C"):
    try:
        C = float(message.text)
        await state.update_data(C=C)

        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç D:",
            reply_markup=reply.in_task,
        )
        await state.set_state(Problem2States.InputD)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")


@router.message(Problem2States.InputD)
async def input_d(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ D –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç —Ç–æ—á–∫—É —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    Returns:
        None
    """

    if await validate_input_float(message, state, "D"):

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()

        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º —Å–ø—Ä–æ—Å–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        P = (
            ((data["C"] - data["A"]) / (data["B"] + data["D"])) * (-1)
            if (data["B"] + data["D"]) != 0
            else 0
        )
        # –ó–∞–º–µ–Ω—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –Ω–æ–ª—å –Ω–∞ –Ω–æ–ª—å
        P = max(0, P)
        Qd = max(0, data["A"] * P - data["B"])

        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—ä–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        Qs = max(0, data["C"] + data["D"] * P)

        # –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        solution = (
            f"–£—Å–ª–æ–≤–∏–µ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è: Qd = Qs, —Ç.–µ.:\n{data['A']} - {data['B']}P ="
            f" {data['C']}+{data['D']}P\n{data['A']} - {data['C']} ="
            f" {data['D']}P + {data['B']}P\n{data['A'] - data['C']} ="
            f" {data['D'] + data['B']}P\n"
            f"{P} = Pe\nQe = {Qs}\n\n–¢–∞–∫–∏–º"
            f" –æ–±—Ä–∞–∑–æ–º, —Ä–∞–≤–Ω–æ–≤–µ—Å–Ω–∞—è —Ü–µ–Ω–∞ Pe = {P}, —Ä–∞–≤–Ω–æ–≤–µ—Å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ Qe"
            f" = {Qs}\n–û–±—ä–µ–º —Å–ø—Ä–æ—Å–∞: {Qd:.2f}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            f"{solution}",
            reply_markup=reply.main,
        )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
