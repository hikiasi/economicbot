"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—é —Ç–æ—á–∫–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è.
"""

from aiogram import Router, F, types
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from utils.problem2states import Problem2States
from utils.validators import validate_input_float

from keyboards import reply

router = Router()


@router.message(F.text.lower().in_(["2 –∑–∞–¥–∞—á–∞"]))
async def handle_problem2(message: Message, state: FSMContext):

    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ –Ω–∞—á–∞–ª–æ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—é —Ç–æ—á–∫–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    Returns:
        None
    """

    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞—á—É –ø–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—é —Ç–æ—á–∫–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—èü•à\n"
                         "–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –í—ã –≤–≤–µ–¥–µ—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è, –æ–±—ä–µ–º–∞ —Å–ø—Ä–æ—Å–∞ –∏ –æ–±—ä–µ–º–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n"
                         "–í–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç A:", reply_markup=reply.in_task)
    await state.set_state(Problem2States.InputA)


@router.message(Problem2States.InputA)
async def input_a(message: types.Message, state: FSMContext):

    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ A.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    Returns:
        None
    """

    if await validate_input_float(message, state, 'A'):
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç B:", reply_markup=reply.in_task)
        await state.set_state(Problem2States.InputB)


@router.message(Problem2States.InputB)
async def input_b(message: types.Message, state: FSMContext):

    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ B.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    Returns:
        None
    """

    if await validate_input_float(message, state, 'B'):
        await message.answer("–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç C:", reply_markup=reply.in_task)
        await state.set_state(Problem2States.InputC)


@router.message(Problem2States.InputC)
async def input_c(message: types.Message, state: FSMContext):

    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ C.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    Returns:
        None
    """

    if await validate_input_float(message, state, 'C'):
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç D:", reply_markup=reply.in_task)
        await state.set_state(Problem2States.InputD)


@router.message(Problem2States.InputD)
async def input_d(message: types.Message, state: FSMContext):

    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ D –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç —Ç–æ—á–∫—É —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    Returns:
        None
    """

    if await validate_input_float(message, state, 'D'):

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()

        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º —Å–ø—Ä–æ—Å–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        P = (data['C'] - data['A']) / (data['B'] + data['D'])
        Qd = data['A'] * P - data['B']
        Qs = data['C'] - data['D'] * P

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f"–¶–µ–Ω–∞ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è: {P:.2f}\n"
                             f"–û–±—ä–µ–º —Å–ø—Ä–æ—Å–∞: {Qd:.2f}\n"
                             f"–û–±—ä–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {Qs:.2f}", reply_markup=reply.main)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
